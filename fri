#!/bin/bash

######################################################################
# fri - Fuzzy ROS2 Introspection
# Version: 0.2.0
# This script is a wrapper around fzf to make it easier to use ROS2.
# License: Apache 2.0
# Copyright (c) 2023-2024, Yuan Xu
# Project: https://github.com/xuyuan/fri
######################################################################

THIS_SCRIPT="$0"
POSITIONAL_ARGS=()
USE_SIM_TIME=""

function topic_info_by_node {
    if [ "$#" == "2" ]
    then
        echo $@ | awk -F: '{print $1}'| xargs ros2 topic info -v | batcat -l=yaml --color=always --style=plain
    fi
}

function topic_echo {
    echo $@ | awk -F: '{print $1}'| xargs ros2 topic echo --once | batcat -l=yaml --color=always --style=plain
}

function node_info {
    ros2 node info $@ | batcat -l=yaml --color=always --style=plain | fzf --ansi --bind "enter:become($THIS_SCRIPT topic_info {+1}),ctrl-a:execute($THIS_SCRIPT node_list),ctrl-s:execute($THIS_SCRIPT service_list),ctrl-y:execute-silent(xclip -selection clipboard {+1}),ctrl-e:preview($THIS_SCRIPT topic_echo {}),ctrl-h:preview(ros2 topic hz $USE_SIM_TIME {+1}),ctrl-i:preview($THIS_SCRIPT topic_info_by_node {}),ctrl-b:preview(ros2 topic bw $USE_SIM_TIME {+1}),ctrl-l:preview(ros2 topic delay $USE_SIM_TIME {+1}),ctrl-t:preview(ros2 topic type {+1} | xargs ros2 interface show),ctrl-v:execute($THIS_SCRIPT visualize {+1})" --preview "$THIS_SCRIPT topic_info_by_node {}"
}

function node_info_by_topic {
    if [ "$6" == "/" ]
    then
        $THIS_SCRIPT node_info "$6""$3" 
    else
        $THIS_SCRIPT node_info "$6""/""$3"
    fi
}

function visualize {
    ros2 run rosshow rosshow $@
}

function node_list {
    ros2 node list $USE_SIM_TIME | fzf --bind "enter:become($THIS_SCRIPT node_info {}),ctrl-a:execute($THIS_SCRIPT topic_list),ctrl-r:reload(ros2 node list),ctrl-s:execute($THIS_SCRIPT service_list),ctrl-y:execute-silent(echo {} | xclip -selection clipboard)" --header 'ros2 node list:' --preview 'ros2 node info {} | batcat -l=yaml --color=always --style=plain'
}

function topic_info {
    ramtmp="$(mktemp -p /dev/shm/)"

    ros2 topic info -v $1 | batcat -l=yaml --color=always --style=plain >> $ramtmp

    perl -pe 'BEGIN{undef $/;} s/\n\n/\x0/g; s/\n$//g' $ramtmp | fzf --ansi --no-multi-line --bind "enter:become($THIS_SCRIPT node_info_by_topic {}),ctrl-a:execute($THIS_SCRIPT topic_list),ctrl-s:execute($THIS_SCRIPT service_list),ctrl-e:preview(ros2 topic echo --once $1 | batcat -l=yaml --color=always --style=plain),ctrl-h:preview(ros2 topic hz $USE_SIM_TIME $1),ctrl-i:preview(echo {}),ctrl-b:preview(ros2 topic bw $USE_SIM_TIME $1),ctrl-l:preview(ros2 topic delay $USE_SIM_TIME $1),ctrl-t:preview(ros2 topic type $1 | xargs ros2 interface show),ctrl-v:execute($THIS_SCRIPT visualize {})" --header "ros2 topic info $1:" --read0 --preview 'echo {} | batcat -l=yaml --color=always --style=plain'
    rm $ramtmp
}

function topic_list {
    ros2 topic list -t $USE_SIM_TIME | fzf --bind "enter:become($THIS_SCRIPT topic_info {+1}),ctrl-a:execute($THIS_SCRIPT node_list),ctrl-s:execute($THIS_SCRIPT service_list),ctrl-r:reload(ros2 topic list -v),ctrl-y:execute-silent(echo {+1} | xclip -selection clipboard),ctrl-e:preview(ros2 topic echo --once {+1} | batcat -l=yaml --color=always --style=plain),ctrl-h:preview(ros2 topic hz $USE_SIM_TIME {+1}),ctrl-i:preview(ros2 topic info -v {+1}),ctrl-b:preview(ros2 topic bw $USE_SIM_TIME {+1}),ctrl-l:preview(ros2 topic delay $USE_SIM_TIME {+1}),ctrl-t:preview(ros2 topic type {+1} | xargs ros2 interface show),ctrl-v:execute($THIS_SCRIPT visualize {+1})" --header 'ros2 topic list:' --preview 'ros2 topic info -v {+1} | batcat -l=yaml --color=always --style=plain'
}

function service_list {
    ros2 service list | fzf --bind "ctrl-a:execute($THIS_SCRIPT node_list),ctrl-r:reload(ros2 service list),ctrl-y:execute-silent(echo {} | xclip -selection clipboard)" \
    --bind 'ctrl-e:preview(ros2 service type {} | xargs ros2 service call {})' \
    --header 'ros2 service list:' --preview 'ros2 service type {} | batcat -l=yaml --color=always --style=plain'
}

function usage {
    if [ $# -gt 0 ]
    then
        echo "unknown usage: $@"
    fi
    echo "fri - Fuzzy ROS2 Introspection"
    echo "Usage: $THIS_SCRIPT [OPTION]... [COMMAND]..."
    echo "Options:"
    echo "  -s, --use-sim-time    use sim time for topic delay"
    echo "  -h, --help            display this help and exit"
    echo "Commands:"
    echo "  node_list             list nodes"
    echo "  topic_list            list topics"
    echo "  service_list          list services"
    echo "  node_info <node>      show node info"
    echo "  topic_info <topic>    show topic info"
    echo "Shortcut keys:"
    echo "  CTRL-a: ros2 node list or ros2 topic list"
    echo "  CTRL-r: reload"
    echo "  CTRL-y: copy selection to clipboard"
    echo "  CTRL-e: ros2 topic echo --once <topic> or ros2 service call <service>"
    echo "  CTRL-h: ros2 topic hz <topic>"
    echo "  CTRL-i: ros2 topic info -v <topic> or ros2 node info <node>"
    echo "  CTRL-b: ros2 topic bw <topic>"
    echo "  CTRL-l: ros2 topic delay <topic>"
    echo "  CTRL-t: ros2 topic type <topic> | xargs ros2 interface show"
    echo "  CTRL-v: visualize topic"
    echo "Visit https://github.com/xuyuan/fri for more information"
}


while [[ $# -gt 0 ]]; do
  case $1 in
    -s|--use-sim-time)
      USE_SIM_TIME="--use-sim-time"
      THIS_SCRIPT="$THIS_SCRIPT $USE_SIM_TIME"
      shift # past argument
      ;;
    -h|--help)
      usage
      exit 1
      ;;
    -*|--*)
      usage $1
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done


if [ ${#POSITIONAL_ARGS[@]} -lt 1 ]
then
    node_list
elif [ ${#POSITIONAL_ARGS[@]} -lt 2 ]
then
    case "${POSITIONAL_ARGS[0]}" in
    node_list) node_list;;
    topic_list) topic_list;;
    service_list) service_list;;
    *) usage ${POSITIONAL_ARGS[@]} ;;
    esac
else
    case "${POSITIONAL_ARGS[0]}" in
    node_info) node_info ${POSITIONAL_ARGS[1]};;
    node_info_by_topic) node_info_by_topic ${POSITIONAL_ARGS[1]};;
    topic_info) topic_info ${POSITIONAL_ARGS[1]};;
    topic_info_by_node) topic_info_by_node ${POSITIONAL_ARGS[1]};;
    topic_echo) topic_echo ${POSITIONAL_ARGS[1]};;
    visualize) visualize ${POSITIONAL_ARGS[1]};;
    *) usage ${POSITIONAL_ARGS[@]} ;;
    esac
fi